// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class_Schema {
  id   String        @id @default(uuid())
  name User_Schema[]
  Task Task[]
}


model User_Schema {
  id                  String                @id
  name                String
  email String?
  classId             String
  role                Roles?
  linkedIn            String?
  github              String?
  leetcode            String?
  solves              Problem_Schema[]
  class               Class_Schema          @relation(fields: [classId], references: [id])
  User_Problem_Schema User_Problem_Schema[]
  Task                Task[]
}

model Problem_Schema {
  id                   String                 @id @default(uuid())
  name                 String
  platform             String                 @default("Leetcode")
  description          String
  topics               Topic_Schema[]
  solved               User_Schema[]
  Topic_Problem_Schema Topic_Problem_Schema[]
  User_Problem_Schema  User_Problem_Schema[]
}

model User_Problem_Schema {
  timestamp DateTime       @default(now())
  problemId String
  userId    String
  problem   Problem_Schema @relation(fields: [problemId], references: [id])
  user      User_Schema    @relation(fields: [userId], references: [id])

  @@id([problemId, userId])
}

model Topic_Schema {
  id                   String                 @id @default(uuid())
  name                 Problem_Schema[]
  Topic_Problem_Schema Topic_Problem_Schema[]
}

model Topic_Problem_Schema {
  topicId   String
  problemId String
  topic     Topic_Schema   @relation(fields: [topicId], references: [id])
  problem   Problem_Schema @relation(fields: [problemId], references: [id])

  @@id([topicId, problemId])
}

model Task {
  id         String       @id @default(uuid())
  classId    String
  count      Int
  assignedBy String
  assignee   User_Schema  @relation(fields: [assignedBy], references: [id])
  class      Class_Schema @relation(fields: [id], references: [id])
  timestamp DateTime @default(now())
}

enum Roles {
  STUDENT
  PLACEMENT_REPRESENTATIVE
  TUTOR
  COURSE_COORDINATOR
}